| # @file - Coh.mac
| # @author - FZLives
| # @date - 2009
| # 
| # Auto COH's for guildies


#turbo

#include spell_routines.inc




| The following #define specifies which channel announcements made by this macro go to. It should always
| be /gu, except when working on this macro, in which case it can be changed to /echo or /tell <charactername>
| in order to cut back on /gu spam.
#define    /announce    /rs

| Set the following define to the number of DeciSeconds (tenths of a second) of no activity
| to wait before automatically dropping from a group.
#define    IdleTimerDS        600

| If a group member is within CoHOutsideOfRadius units of the Mage running this macro, it's assumed
| that they've already been CoH'd, and will not be CoH'd again.
#define CoHOutsideOfRadius    200

| The following define specifies the number of seconds (not deciseconds) to wait after a group
| is formed but before COHing starts, and also after the entire group is CoH'd, but before the mage leaves.
#define ManualModeDelay    3


| If you want this macro to CoH only characters who are a member of the casting Mage's guild, set the
| following #define to TRUE.
#define CoHGuildiesOnly    FALSE




Sub Main

    | This /delay 1 should be the first line of any macro that may be launched by another macro. MQ2 bug work-around.
    /delay 1


    /if ( ${Me.Class.Name.NotEqual[Magician]} ) {

        /echo I am not a Magician, so I cannot run a Call of the Hero macro.
        /popup I am not a Magician, so I cannot run a Call of the Hero macro.

        /endmacro

    } else /if ( ${FindItemCount[=Pearl]} == 0 ) {

        /announce I am completely out of Pearls! I need to be re-stocked before I can cast Call of the Hero.
        /popup Out of Pearls!

        /endmacro

    } else /if ( ${FindItemCount[=Pearl]} < 20 ) {

        /announce I have only ${FindItemCount[=Pearl]} Pearl${If[${FindItemCount[=Pearl]}>1,s,]} left! I will not automatically CoH until I am restocked.
        /announce Contact my owner to have him/her manually CoH someone who has a supply of pearls available to re-stock me.

        /endmacro
    }


    | Now announces the Mage's supply of Pearls in guild chat, so that guildies know if they need to bring Pearls
    | to restock the CoH Bot.
    /announce COH activated in ${Zone.Name}. ${FindItemCount[=Pearl]} Pearls

    /declare bNotWholeGroup    bool    outer FALSE
    /declare bWaitForMore    bool    outer FALSE

    :SubMainLoop

        /if ( ${Me.Grouped}) {

            /if ( !${Defined[timerIdleAutoDisband]} ) {

                /declare timerIdleAutoDisband    timer    outer    IdleTimerDS

            } else /if ( ${timerIdleAutoDisband} == 0 ) {

                /call Disband
            }			
        }

        /doevents

        /delay 1
		/call CoHGroup
		
    /goto :SubMainLoop

/return





Sub CoHGroup


    /delay 2

    /if ( ${Defined[sGroupMembersAlreadyCoHd]} ) {

        /varset sGroupMembersAlreadyCoHd    <NULL>
    }

    | If the Mage happens to have someone else on target, using /invite to accept a group invite will backfire...
    | so clear target first.
    /squelch /target clear



    | In laggy situations, it could take more than a second to actually join the group. So increase the delay, but
    | put in a check condition where the /delay will "short-circuit" when the condition is met.
	/delay 35    ${Group.Members} > 0

    | Delay an additional half-second, just to make sure that the group has fully populated.
    /delay 5


    /declare iStartingTime    int        local    ${Macro.RunTime}

		/if ( ${Me.Grouped}) {
			/announce CoHing: ${Me.GroupList}.
		}

        /declare iGroupMemberCOH    int        local
        /declare iCoHsPerformed        int        local

        :COHGroupLoop

            /varset iCoHsPerformed    0

            /for iGroupMemberCOH 1 to ${Group.Members}

                /if ( ${Select[${Group.Member[${iGroupMemberCOH}].Type},PC]} == 1 && (!${Defined[sGroupMembersAlreadyCoHd]} || !${sGroupMembersAlreadyCoHd.Find[<${Group.Member[${iGroupMemberCOH}].CleanName}>]}) ) {

                    /call PerformCoHOnTarget "${Group.Member[${iGroupMemberCOH}].CleanName}"

                    /if ( ${Select[${Macro.Return},TRUE]} ) {

                        /varcalc iCoHsPerformed                ${iCoHsPerformed} + 1
                    }
                }

                /doevents

            /next iGroupMemberCOH

        /if ( ${iCoHsPerformed} >= 1 ) {

            /goto :COHGroupLoop
        }

        /call Disband


/return





Sub Disband

    /varset bWaitForMore    FALSE

    /if ( ${Me.Grouped} ) {

        /g It looks like I've either summoned everyone, some of you were not eligible for a CoH, or I was not able to summon everyone.
        /g If you don't want me to leave the group then please say "wait" in group chat. You have ManualModeDelay seconds to decide.


        /declare iStartingTime    int        local    ${Macro.RunTime}

        :WaitForMoreGracePeriodLoopHead

            /delay 5

            /doevents Wait

        /if ( !${bWaitForMore} && (${Macro.RunTime} - ${iStartingTime}) < ManualModeDelay && ${Me.Grouped} ) {

            /goto :WaitForMoreGracePeriodLoopHead
        }
    }

/if ( ${bWaitForMore} ) {

        /g Ok! I'll wait a bit longer before disbanding. If anyone still wants a CoH, please just say "me" in group chat.

        /if ( ${Defined[timerIdleAutoDisband]} ) {

            /varset timerIdleAutoDisband    IdleTimerDS
        }

        /return

    } else {

        /if ( ${Defined[sGroupMembersAlreadyCoHd]} ) {

            | Build a nicely-formatted list of people that I've just successfully CoH'd

            /declare iLoopCounter    int        local

            /for iLoopCounter    1    to    ${sGroupMembersAlreadyCoHd.Count[<]}

                /if ( !${Defined[sCoHdToons]} ) {

                    /if ( ${sGroupMembersAlreadyCoHd.Count[<]} == 1 ) {

                        /declare sCoHdToons        string    local    person: ${sGroupMembersAlreadyCoHd.Arg[${iLoopCounter},<].Left[-1]}.

                    } else {

                        /declare sCoHdToons        string    local    people: ${sGroupMembersAlreadyCoHd.Arg[${iLoopCounter},<].Left[-1]}
                    }

                } else /if ( ${iLoopCounter} == ${sGroupMembersAlreadyCoHd.Count[<]} ) {

                    /varset sCoHdToons    ${sCoHdToons}, and ${sGroupMembersAlreadyCoHd.Arg[${iLoopCounter},<].Left[-1]}.

                } else {

                    /varset sCoHdToons    ${sCoHdToons}, ${sGroupMembersAlreadyCoHd.Arg[${iLoopCounter},<].Left[-1]}
                }

            /next iLoopCounter

            /deletevar sGroupMembersAlreadyCoHd
        }

        /if ( ${Defined[sCoHdToons]}  && ${Me.Grouped}) {
            /announce Done CoHing ${sCoHdToons}
        }

        /squelch /target myself
        /delay 15    ${Target.ID} == ${Me.ID}
        /disband


        /if ( ${Defined[timerIdleAutoDisband]} ) {

                /deletevar timerIdleAutoDisband
        }
    }

/return









Sub PerformCoHOnTarget(string sTargetName)

    | Before we do anything, if there's some reason why the Mage couldn't cast their CoH spell immediately, wait a bit.
    | We want to do this wait first, before we validate the CoH target, because a lot can change in the time it takes to wait
    | for the CoH spell to become ready. Another Mage in the group could CoH the target, the target could die, the group could
    | disband, etc.


    /delay 300 ( !${Me.Moving} && ${Select[${Me.SpellReady[Call of the Hero]},TRUE,NULL]} != 0 && ${Me.CurrentMana} >= (${Spell[Call of the Hero].Mana} + 50) && !${Me.Stunned} )


    | Now, determine the ID of the COH Target. Do so by looping through the list of group members, and checking
    | for an exact name match. This is important because there may be characters whose names contain the same
    | elements. For example, What if Lesh requests a CoH, but Leshrac is physically closer to the CoH Mage.
    | /target pc Lesh will then target Leshrac. We also have "Lizo" and "Lizoheals" in our guild -- same problem.
    | Targetting by ID after doing an exact name match eliminates this problem.

    /declare iGroupMember    int        local
    /declare iCoHTargetID    int        local    0

    | I am always Group.Member[0], so start with index 1.

    /for iGroupMember    1    to    ${Group.Members}

    /if ( ${Group.Member[${iGroupMember}].CleanName.Equal[${sTargetName}]} ) {

        /varset iCoHTargetID    ${Group.Member[${iGroupMember}].ID}

    } else {

        /next iGroupMember
    }

    | If we get to this point and iCoHTargetID is still zero, it means that sTargetName is not in my group.
    /if ( ${iCoHTargetID} == 0 ) {

        /echo ${sTargetName} is not in my group. How the heck did they manage to fire this event? Possibly said "/g me" then immediately disbanded?

        | Return false to indicate that sTargetName was not CoH'd.
        /return FALSE
    }


    | Now, make sure that sTargetName is a valid CoH target...

    /if ( ${Select[${Spawn[id ${iCoHTargetID}].Type},PC]} != 1 ) {

        /echo WTF! How the heck is my CoH target not a PC? Either something's majorly wacky, or the CoH target just died and became a corpse. Sucks to be him/her. ROFK! KMAO!

        /return FALSE

    } else /if ( ${Spawn[id ${iCoHTargetID}].Distance} < CoHOutsideOfRadius ) {

        | Seems that the target has already been CoH'd. No need to waste the time (and a Pearl) doing it again.

        /return FALSE

    } else /if ( CoHGuildiesOnly && ${Me.Guild.Length} && ${Spawn[id ${iCoHTargetID}].Guild.NotEqual[${Me.Guild}]} ) {

        /g I'm sorry, ${Spawn[id ${iCoHTargetID}].CleanName}. I'm only authorized to CoH players who wear the <${Me.Guild}> guild tag.

        /return FALSE

    } else /if ( ${FindItemCount[=Pearl]} < 8 ) {

        /g I'm sorry, I'm dangerously low on Pearls, and cannot CoH you.
        /g If any of you have Pearls that can re-stock me, please contact the owner of this Mage and have them CoH you manually.

        
        /if ( ${FindItemCount[=Pearl]} > 0 ) {

            /announce I only have ${FindItemCount[=Pearl]} Pearl(s) in my inventory. Automatic CoHs are suspended until I get more Pearls.
            /announce If you have Pearls with you that you can re-stock me with, let my owner know so that he/she can CoH you manually.

        } else {

            /announce I have no Pearls, so I am unable to perform any CoHs.
        }

        /popup Critically low on Pearls! Restock ASAP. Ending Macro.
        /echo Critically low on Pearls! Restock ASAP. Ending Macro.

        /endmacro

    } else {

        | Ok, all of the pre-conditions are met. Let's actually attempt to perform a CoH. But first, make sure we're ready and able to cast
        | the CoH spell successfully...

        /if ( ${Me.Moving} ) {

            /g Sorry, ${Spawn[id ${iCoHTargetID}].CleanName}. For some reason I'm moving around, so I can't cast CoH on you. Tell my owner to make me stand still!

        } else /if ( ${Select[${Me.SpellReady[Call of the Hero]},TRUE,NULL]} == 0 ) {

            /g Sorry, ${Spawn[id ${iCoHTargetID}].CleanName}. For some reason my CoH spell can't be cast. Perhaps I'm lagging out? Either way, I'll come back to you later.

        } else /if ( ${Me.CurrentMana} < ${Spell[Call of the Hero].Mana} ) {

            /g Sorry, ${Spawn[id ${iCoHTargetID}].CleanName}. I don't have enough mana to CoH you. I'll try again in a bit.

        } else /if ( ${Me.Stunned} ) {

            /g Sorry, ${Spawn[id ${iCoHTargetID}].CleanName}. I'm stunned, and therefore can't cast the CoH spell on you.

        } else {

            | Alright! If we got to this point, it appears that we have a valid target, and are ready to cast CoH on him/her.

            /if ( !${Me.Standing} ) {

                /stand
            }

            | First, get the right person on target...

            /squelch /target pc id ${iCoHTargetID}

            /delay 35 ${Target.ID} == ${iCoHTargetID}

            /if ( ${Target.ID} != ${iCoHTargetID} ) {

                /g Sorry, ${Spawn[id ${iCoHTargetID}].CleanName}. I can't target you for CoH for some reason. Lag, perhaps?

                /return FALSE
            }

            | Added "20s" to the end of the /call Cast line. That means that the Cast() function will keep
            | trying to cast for 20 seconds, including after fizzles and interrupts.
			/if (${Me.SpellReady[Call of the Hero]}) {
				/casting 1771 -maxtries|2
				/delay 16s !${Me.Casting.ID}
			} else if (${Me.AltAbilityReady[Call of the Hero]}) {
				/casting 7050 -maxtries|2
				/delay 16s !${Me.Casting.ID}				
			}
 
            | Should put in a check for the "There are no heroes here" message, or whatever it is.

            /g Successfully CoH'd ${Spawn[id ${iCoHTargetID}].CleanName}.

            /if ( !${Defined[sGroupMembersAlreadyCoHd]} ) {

                /declare sGroupMembersAlreadyCoHd    string    outer    <${Spawn[id ${iCoHTargetID}].CleanName}>

            } else {

                /varset sGroupMembersAlreadyCoHd    ${sGroupMembersAlreadyCoHd}<${Spawn[id ${iCoHTargetID}].CleanName}>
            }

            /delay 60

            /if ( ${Defined[timerIdleAutoDisband]} ) {

                    /varset timerIdleAutoDisband    IdleTimerDS
            }

            /return TRUE
        }
    }

/return FALSE